<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - eric-pierce.com</title><link>https://eric-pierce.com/posts/</link><description>All Posts | eric-pierce.com</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Fri, 23 Dec 2022 14:36:36 -0600</lastBuildDate><atom:link href="https://eric-pierce.com/posts/" rel="self" type="application/rss+xml"/><item><title>Moving to Mastodon</title><link>https://eric-pierce.com/moving-to-mastodon/</link><pubDate>Fri, 23 Dec 2022 14:36:36 -0600</pubDate><guid>https://eric-pierce.com/moving-to-mastodon/</guid><description><![CDATA[<h3 id="why-mastodon">Why Mastodon</h3>
<p>As part of my self-hosting journey, I shut down essentially all my social media in 2019 with the exception of my <a href="https://www.linkedin.com/in/ericrpierce/" target="_blank" rel="noopener noreffer">LinkedIn</a>, <a href="https://open.spotify.com/user/p8h9h74rsfedu9e20d97kh7mj" target="_blank" rel="noopener noreffer">Spotify</a>, and a twitter account which I used to follow but not to post. I didn&rsquo;t think it was possible to really self-host social media, but the events of the past two months and the <a href="https://www.theverge.com/2022/12/20/23518325/mastodon-monthly-active-users-twitter-elon-musk" target="_blank" rel="noopener noreffer">explosive growth</a> that Mastodon has undergone has changed that. Regardless of what you think about the recent changes at Twitter and the rise of Mastdon in headlines, the idea of decentralized and self-hostable social media is super interesting, and totally feasible.</p>
<figure><figcaption class="image-caption">The Self Hoster by <a href="https://mastodon.joedean.dev/@joe/109455796397314685" target="_blank" rel="noopener noreffer">Joe Dean</a></figcaption>
    </figure>
<p>As always it&rsquo;s important to approach self-hosting with eyes wide open, and there are definitely pros and cons compared to the big-tech versions of social media:</p>
<div class="details admonition success open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-check-circle fa-fw"></i>Pros<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>Your data lives on your server and you own it. You get to decide how public you want to make it. Privacy and social media are usually completely mutually exclusive, but not with Mastodon.</li>
<li>No Ads, No Algorithm: Mastodon isn&rsquo;t a single company looking to drive revenue, so advertising and algorithm driven</li>
<li>Communities (Instances) can be local and fantastic
<ul>
<li>Yes this is generally the most confusing part about Mastodon, but it&rsquo;s also a benefit. Mastodon instances are generally built around a concept or common interest, like a location, profession, etc. I found some excellent Mastodon instances based in <a href="https://atx.pub" target="_blank" rel="noopener noreffer">Austin, TX</a>, and several more in Chicago.</li>
<li>While facebook has groups, Instagram and Twitter don&rsquo;t really have a concept like this outside of hashtags and recommendations</li>
</ul>
</li>
</ul>
</div>
        </div>
    </div>
<div class="details admonition failure open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-times-circle fa-fw"></i>Cons<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>Mastodon isn&rsquo;t as simple for the layman as a centralized service like twitter</li>
<li>Many accounts you may care about only post on twitter (though I have a workaround for this)</li>
<li>Finding content or being found yourself may be difficult
<ul>
<li>There is no service which searches all Mastodon or Fediverse accounts, and your Mastodon instance will only be able to search other instances it knows about.</li>
<li>If this is a big issue for you, some simple workarounds are to follow hashtags you&rsquo;re interested in, or leverage a relay</li>
</ul>
</li>
</ul>
</div>
        </div>
    </div>
<h3 id="setting-up-an-instance">Setting up an Instance</h3>
<p>Mastodon is one of several software platforms that communicate with each other through the <a href="https://en.wikipedia.org/wiki/ActivityPub" target="_blank" rel="noopener noreffer">ActivityPub</a> protocol. Any platform that uses ActivityPub can technically talk to each other, though some are more specialized around how closely they resemble walled garden services. Mastodon and Pleroma are two that closely resemble Twitter, and others like <a href="https://pixelfed.org/" target="_blank" rel="noopener noreffer">Pixelfed</a> are more closely like Instagram. Any platform which can use the ActivityPub protocol, can be classified as &ldquo;part of the fediverse&rdquo;.</p>
<p>I initially tried out Plermoa due to ease of setup (it requires far less resources and work to get running), but ultimately decided to go for a full Mastodon setup. Lucky for me (any anyone who wants to set up Mastodon) the always incredible folks over at <a href="https://www.linuxserver.io/" target="_blank" rel="noopener noreffer">linuxserver.io</a> recently released <a href="https://github.com/linuxserver/docker-mastodon" target="_blank" rel="noopener noreffer">a single docker image</a> which packages up all the services needed to stand up Mastodon yourself except for redis and postgres.</p>
<p>Because social media is inherently &ldquo;social&rdquo; I set up a new VPS and used a new domain for my Mastodon instance rather than the domain/VPS I use for my <a href="https://eric-pierce.com/building-a-personal-cloud/" target="_blank" rel="noopener noreffer">personal services</a>. The docker compose file can be found <a href="https://github.com/eric-pierce/Mastadon-and-MC/blob/main/docker-compose.yml" target="_blank" rel="noopener noreffer">here</a>. Here&rsquo;s the relevant section for mastodon, the other key services (postgres and redis) are standard installs, check out the full docker compose to see the entire setup file.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mastodon</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">mastodon</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">linuxserver/mastodon:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">internal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">redis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">8002</span><span class="p">:</span><span class="m">80</span><span class="l">/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">8443</span><span class="p">:</span><span class="m">443</span><span class="l">/tcp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">$DOCKERDIR/mastodon:/config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">security_opt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="kc">no</span>-<span class="l">new-privileges:true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=$TZ</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=$PUID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=$PGID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">LOCAL_DOMAIN=$MAST_DOMAIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">REDIS_HOST=redis</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">REDIS_PORT=6379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_HOST=postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_USER=mastodon</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_NAME=mastodon</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_PASS=$MAST_POSTGRES_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">DB_PORT=5432</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ES_ENABLED=false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SECRET_KEY_BASE=$SECRET_KEY_BASE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">OTP_SECRET=$OTP_SECRET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">VAPID_PRIVATE_KEY=$VAPID_PRIVATE_KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">VAPID_PUBLIC_KEY=$VAPID_PUBLIC_KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SMTP_SERVER=$SMTP_HOST</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SMTP_PORT=$SMTP_PORT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SMTP_LOGIN=$SMTP_USERNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SMTP_PASSWORD=$SMTP_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SMTP_FROM_ADDRESS=$SMTP_FROM</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">S3_ENABLED=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">S3_ENDPOINT=$S3_ENDPOINT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">S3_HOSTNAME=$S3_HOSTNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">S3_BUCKET=$S3_BUCKET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">S3_ALIAS_HOST=$S3_ALIAS_HOST</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#- WEB_DOMAIN=$MAST_DOMAIN #optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#- RAILS_SERVE_STATIC_FILES=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#- ES_HOST=es #optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#- ES_PORT=9200 #optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#- ES_USER=elastic #optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">#- ES_PASS=elastic #optional</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.enable=true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## HTTP Routers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.mastodon-rtr.entrypoints=https&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.mastodon-rtr.rule=Host(`$MAST_DOMAIN`)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.mastodon-rtr.tls=true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## Middlewares</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.mastodon-rtr.middlewares=chain-no-auth@file&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## HTTP Services</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.mastodon-rtr.service=mastodon-svc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.services.mastodon-svc.loadbalancer.server.port=443&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.services.mastodon-svc.loadbalancer.server.scheme=https&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.services.mastodon-svc.loadbalancer.serversTransport=masto@file&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>There are a few quirks to be aware of with the linuxserver.io image:</p>
<ul>
<li>Some services are optional such as using an S3 bucket for media hosting (I highly recommend) and implementing ElasticSearch (probably not necessary, especially for a small instance)</li>
<li>Mastodon includes an internal forced 301 redirect to https, and then proxies to port 443, but it does this with a self-signed certificate. This can create challenges if you&rsquo;re putting the Mastodon service behind another reverse proxy like nginx, or in my case Traefik.
<ul>
<li>I&rsquo;m actually still working with this one, but in the near term if you set your instance up to skip the internal verification of the certificate, you&rsquo;ll be set. All externally facing traffic will be secure, but some of the traffic inside of the container won&rsquo;t necessarily be. More discussion on this <a href="https://github.com/linuxserver/docker-mastodon/issues/5" target="_blank" rel="noopener noreffer">here</a></li>
</ul>
</li>
</ul>
<h3 id="media-storage">Media Storage</h3>
<p>Social Media can generate a surprising amount of media, very quickly. Even on my single-user instance I&rsquo;ve amassed around 12Gb of media, only a month in. One option would be to just let your server handle all the media, but that can eat up a lot of storage space, and generate high costs depending on your plan and allocated bandwidth. Backblaze put together a <a href="https://www.backblaze.com/blog/free-image-hosting-with-cloudflare-transform-rules-and-backblaze-b2/" target="_blank" rel="noopener noreffer">fantastic guide</a> which outlines setting up cloudflare as a caching layer in front of backblaze to bring your bandwidth costs to essentially 0, with very low storage costs and high availability of your media, all hosted under your own domain name.</p>
<h3 id="accessing-twitter">Accessing Twitter</h3>
<p>Not all Twitter users will move to Mastodon, and there are a few ways to follow their accounts. My goal here was to have a single location to access my content, have it free of ads, and ideally to be stored on my server.</p>
<p><strong><a href="https://nitter.net/" target="_blank" rel="noopener noreffer">Nitter</a></strong></p>
<ul>
<li>Nitter is essentially an mirror of content from Twitter. I haven&rsquo;t personally used it, but it seems like a very simple way to access both Twitter and Mastodon content. Unfortunatley I don&rsquo;t see any way to bring Nitter + Mastodon into one seamless activity feed, so I explored other options.</li>
</ul>
<p><strong><a href="https://github.com/NicolasConstant/BirdsiteLive" target="_blank" rel="noopener noreffer">BirdsiteLive</a></strong></p>
<ul>
<li>This is what I ended up going with. <a href="https://github.com/NicolasConstant/BirdsiteLive" target="_blank" rel="noopener noreffer">BirdsiteLive</a> is a bridge between the Twitter API and the ActivityPub protocol. It essentially allows you to follow any twitter account on Mastodon, just by looking up the twitter username and using the BirdsiteLive domain you set up as the &ldquo;instance&rdquo;.</li>
</ul>
<p>Here&rsquo;s the BirdsiteLive portion of my docker-compose file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">bsl</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">birdsitelive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nicolasconstant/birdsitelive:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">internal</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">traefik</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">security_opt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="kc">no</span>-<span class="l">new-privileges:true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8009:80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=$TZ</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=$PUID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=$PGID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Instance:Domain=bsl.$DOMAINNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Instance:AdminEmail=name@domain.ext</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Instance:ResolveMentionsInProfiles=true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Db:Type=postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Db:Host=postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Db:Name=birdsitelive</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Db:User=$BSL_POSTGRES_USER</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Db:Password=$BSL_POSTGRES_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Twitter:ConsumerKey=$BSL_TWITTER_API_KEY</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Twitter:ConsumerSecret=$BSL_TWITTER_API_SECRET</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Moderation:FollowersWhiteListing=$MAST_DOMAIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">Instance:Name=$BSL_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.enable=true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## HTTP Routers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.bsl-rtr.entrypoints=https&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.bsl-rtr.rule=Host(`bsl.$DOMAINNAME`)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.bsl-rtr.tls=true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## Middlewares</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.bsl-rtr.middlewares=chain-no-auth@file&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.bsl-rtr.middlewares=middlewares-bsl@file&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## HTTP Services</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.routers.bsl-rtr.service=bsl-svc&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;traefik.http.services.bsl-svc.loadbalancer.server.port=80&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>There is still a fair amount to be desired with this, and it requires a special API from Twitter which needs to be &ldquo;approved&rdquo; (it appears that Twitter has automated this approval, and my API account request was granted immediately after I filled out the form requesting it). The API also has limits which you can see on your BirdsiteLive page on whatever domain you host it on, so you&rsquo;ll want to only allow instances / users to access and follow accounts (configured in the compose file).</p>
<p>I&rsquo;d like to replace this with Nitter at some point, if there is a good solution to convert a Nitter feed into an ActivityPub feed.</p>
<h3 id="mobile-apps">Mobile Apps</h3>
<p>I only used twitter on my phone, so the mobile experience is pretty important. I&rsquo;m an iOS user, and after evaluating a few different apps, I found two which are fantastic:</p>
<ol>
<li><strong>Free</strong> <a href="https://apps.apple.com/gt/app/mastoot/id1501485410?l=en" target="_blank" rel="noopener noreffer">Mastoot</a>: This app is fairly mature, and has all the features I would want in a Mastodon app. It isn&rsquo;t open source, but it checks pretty much every other box.</li>
<li><strong>Paid</strong> <a href="https://tapbots.social/@Ivory" target="_blank" rel="noopener noreffer">Ivory</a>: For those who are used to Tweetbot, this will feel like home. Tapbots are working to implement a Mastodon version of Tweetbot, called Ivory. This is currently in alpha testing, so if you want to hop on the train you&rsquo;ll need to get in on their TestFlight list. They&rsquo;ve been posting TestFlight openings to the Ivory Mastodon account. The alpha/beta isn&rsquo;t paid, but I&rsquo;m sure that like Tweetbot the final product will be.</li>
</ol>
<h3 id="get-posting">Get Posting</h3>
<p>Yes <em>Posting</em> - I&rsquo;m glad that the &ldquo;toot&rdquo; <a href="https://gizmodo.com/mastodon-toot-retired-twitter-tweet-equivalent-1849786221" target="_blank" rel="noopener noreffer">went the way of the actual Mastodon</a>, it needed to happen for anyone to take the service seriously.</p>
<p>If you have any thoughts, different experiences, or want to correct anything above, hit me up on <a href="https://pierce.xyz/@eric" target="_blank" rel="noopener noreffer">Mastodon</a>!</p>
]]></description></item><item><title>Placing Select Docker Containers Behind a VPN</title><link>https://eric-pierce.com/placing-select-docker-containers-behind-a-vpn/</link><pubDate>Mon, 08 Nov 2021 21:45:14 -0600</pubDate><guid>https://eric-pierce.com/placing-select-docker-containers-behind-a-vpn/</guid><description><![CDATA[<h3 id="who-needs-a-vpn">Who Needs A VPN?</h3>
<p>Docker enables containers to quickly be spun up and used anywhere, but one of the risks many self-hosters take is exposing sensitive services to the open web. There is a balance between safety and convenience with each application exposed, but there are some applications which have no need to be publicly accessible.</p>
<p>These typically include administrative applications such as:</p>
<ul>
<li>Portainer</li>
<li>PGAdmin (Postgres)</li>
<li>phpMyAdmin (Mariadb)</li>
<li>Redis Commander</li>
<li>Any other service you don&rsquo;t want exposed</li>
</ul>
<p>One way to keep these services running but prevent them from being exposed is to place them behind a secure VPN. There are just a handful of major VPN protocols out there today, OpenVPN, IPSec, and the new Wireguard protocol are the big names. While Wireguard is new on the block and may not have had the level of auditing that OpenVPN has, it is blazing fast, and apparently so elegantly written that the creator of Linux, Linus Torvolds, <a href="https://lists.openwall.net/netdev/2018/08/02/124" target="_blank" rel="noopener noreffer">called it a work of art</a> before including it directly in the Linux Kernel.</p>
<p>Some may want to hide all their applications behind a VPN for very high security, while others like may only want to hide the ones which are rarely needed. This guide outlines how to configure specific services to only be accessible from behind your VPN while leaving others publicly accessible.</p>
<h3 id="set-up-a-local-docker-compose-network">Set up a local docker-compose network</h3>
<p>Add a new network to docker-compose for your services to live on/</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">vpn-subnet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">external</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vpn-subnet</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="setting-up-wireguard">Setting up Wireguard</h3>
<p>Although Wireguard doesn&rsquo;t maintain a docker container, the excellent folks at linuxserver.io do. Setting up a wireguard container in Docker is as simple as adding a new service to your docker-compose file. This docker-compose snippet assumes you have a few environment variables configured:</p>
<ul>
<li><strong>DOCKERDIR</strong> set to the directory you want your services to store their non-temporary data files in. For this example we assume it is ~/docker/</li>
<li><strong>DOMAINNAME</strong> set to the domain you&rsquo;re hosting the content on.</li>
<li><strong>PUID</strong> set to the user id your docker runs under (run <code>id yourdockerusername</code> and find the numeric value associated with &ldquo;uid&rdquo;)</li>
<li><strong>PGID</strong> set to the group id your docker runs under (run <code>id yourdockerusername</code> and find the numeric value associated with &ldquo;gid&rdquo;)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wireguard</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">wireguard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">linuxserver/wireguard:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">vpn-subnet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ipv4_address</span><span class="p">:</span><span class="w"> </span><span class="m">20.20.10.5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">$DOCKERDIR/wireguard:/config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/lib/modules:/lib/modules</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">51820</span><span class="p">:</span><span class="m">51820</span><span class="l">/udp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sysctls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">net.ipv4.conf.all.src_valid_mark=1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cap_add</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">NET_ADMIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SYS_MODULE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">security_opt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="kc">no</span>-<span class="l">new-privileges:true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=$TZ</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=$PUID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=$PGID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SERVERURL=wireguard.$DOMAINNAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SERVERPORT=51820</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PEERS=2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PEERDNS=auto</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">INTERNAL_SUBNET=10.13.14.0</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Most of the above should look pretty familiar if you&rsquo;ve used docker-compose before, with the exception of the &ldquo;sysctls&rdquo; and &ldquo;cap_add&rdquo; sections. The &ldquo;sysctls&rdquo; section enables the wireguard container to manage ipv4 network connections, something we need for our internal VPN subnet. The &ldquo;cap_add&rdquo; section essentially grants some extra privileges to our container, such as the ability to control network functions, and manage kernel modules. We&rsquo;re also mounting /lib/modules as a volume into the container.</p>
<p>I chose to set the container specific environment variable &ldquo;PEERS&rdquo; to 2, which means that the container will automatically generate two profiles for connections. I personally use one for my phone to connect on the go and one for my desktop. You&rsquo;ll see the QR codes for these peers in the logs, and if you want to see one of the codes you can run <code>sudo docker exec -it wireguard /app/show-peer 1</code>.</p>
<h3 id="set-up-dns-firewall-passthrough-and-port-forwarding">Set up DNS, Firewall Passthrough, and Port Forwarding</h3>
<p>If you aren&rsquo;t using wildcard cname values for subdomains, you&rsquo;ll need to manually add &lsquo;wireguard&rsquo; as a new CNAME entry on your DNS manager. Note that this does open up the standard wireguard port of 51820 to the internet, so if you&rsquo;re hosting at home you will need to forward whichever port you decide to use from your router to your server.</p>
<p>You&rsquo;ll also need to allow access to the port via your firewall</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">sudo ufw allow 51820/udp 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="place-container-behind-your-new-vpn">Place Container Behind your New VPN</h3>
<p>We need to assign static ip addresses on the network we created above. The YAML format for this can be a bit different, and you may need to specify &ldquo;null&rdquo; as the target for any existing networks assigned to the containers. In my case I have an &ldquo;internal&rdquo; network used for services such as my database containers as can be seen in the examples of some services I&rsquo;ve placed behind my VPN below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pgadmin</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">pgadmin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">dpage/pgadmin4:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">vpn-subnet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ipv4_address</span><span class="p">:</span><span class="w"> </span><span class="m">20.20.10.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">postgres</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">security_opt</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="kc">no</span>-<span class="l">new-privileges:true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">$DOCKERDIR/pgadmin:/var/lib/pgadmin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=$TZ</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=$PUID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=$PGID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGADMIN_DEFAULT_EMAIL=$PERSONAL_EMAIL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGADMIN_LISTEN_PORT=5050</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pma</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">phpmyadmin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">phpmyadmin/phpmyadmin:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">phpmyadmin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">internal</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">vpn-subnet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ipv4_address</span><span class="p">:</span><span class="w"> </span><span class="m">20.20.10.4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mariadb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secrets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mysql_root_password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=$TZ</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=$PUID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=$PGID</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PMA_HOST=mariadb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ServerName=$DOMAINNAME</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="assign-readable-domain-names">Assign Readable Domain Names</h3>
<p>Technically your services are accessible from the IP addresses you&rsquo;ve assigned, after you&rsquo;ve connected to your VPN, but who is going to remember the IP address you assigned to each? To get around this and assign standard domain names, we can utilize the COREDNS setup running in the Wireguard container.</p>
<p>First create a wireguard directory in your docker apps directory. This assumes that you&rsquo;re using your home directory as the docker apps directory</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">mkdir ~/docker/wireguard/coredns/ 
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now we&rsquo;ll add the Corefile configuration it needs to manage local domain names.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">nano ~/docker/wireguard/coredns/Corefile
</span></span></code></pre></td></tr></table>
</div>
</div><p>The below is an example of what the Corefile looks like for the four applications I&rsquo;ve configured. The first portion starting with &ldquo;loop&rdquo; effectively forwards DNS requests to the host DNS resolver. Replace the subdomains with the applications you want to host behind your VPN. Replace EXAMPLE.COM with your domain name, no CAPS needed.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-JSON" data-lang="JSON"><span class="line"><span class="cl"><span class="err">.</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">loop</span>
</span></span><span class="line"><span class="cl">    <span class="err">forward</span> <span class="err">.</span> <span class="err">/etc/resolv.conf</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">portainer.EXAMPLE.COM:</span><span class="mi">53</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">file</span> <span class="err">portainer.EXAMPLE.COM.db</span>
</span></span><span class="line"><span class="cl">    <span class="err">log</span>
</span></span><span class="line"><span class="cl">    <span class="err">errors</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">pma.EXAMPLE.COM:</span><span class="mi">53</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">file</span> <span class="err">pma.EXAMPLE.COM.db</span>
</span></span><span class="line"><span class="cl">    <span class="err">log</span>
</span></span><span class="line"><span class="cl">    <span class="err">errors</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">pga.EXAMPLE.COM:</span><span class="mi">53</span> <span class="p">{</span>       
</span></span><span class="line"><span class="cl">    <span class="err">file</span> <span class="err">pga.EXAMPLE.COM.db</span>
</span></span><span class="line"><span class="cl">    <span class="err">log</span>                  
</span></span><span class="line"><span class="cl">    <span class="err">errors</span>               
</span></span><span class="line"><span class="cl"><span class="p">}</span>                        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">redis.EXAMPLE.COM:</span><span class="mi">53</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="err">file</span> <span class="err">redis.EXAMPLE.COM.db</span>
</span></span><span class="line"><span class="cl">    <span class="err">log</span>
</span></span><span class="line"><span class="cl">    <span class="err">errors</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now we need to create the files referenced in the above Corefile, which hold the configuration details each service needs. Here&rsquo;s an example for my portainer container, again replace EXAMPLE.COM with your domain name.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">nano ~/docker/wireguard/coredns/portainer.EXAMPLE.COM.db
</span></span></code></pre></td></tr></table>
</div>
</div><p>The contents should follow this structure, replacing EXAMPLE.COM with your domain name.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">portainer.EXAMPLE.COM.        3600 IN SOA portainer.EXAMPLE.COM. YOURNAME.portainer.EXAMPLE.COM. (
</span></span><span class="line"><span class="cl">                                2017042745 ; serial
</span></span><span class="line"><span class="cl">                                7200       ; refresh (2 hours)
</span></span><span class="line"><span class="cl">                                3600       ; retry (1 hour)
</span></span><span class="line"><span class="cl">                                1209600    ; expire (2 weeks)
</span></span><span class="line"><span class="cl">                                3600       ; minimum (1 hour)
</span></span><span class="line"><span class="cl">                                )
</span></span><span class="line"><span class="cl">portainer.EXAMPLE.COM.     IN A     20.20.10.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>The &ldquo;serial&rdquo; value can be set to any value, one suggestion would be the date you added the service.
You should also replace the &ldquo;YOURNAME&rdquo; in the example above with an identifier. I personally use &ldquo;epierce&rdquo;.
You&rsquo;ll also want to modify the IP address on the last line of the file to be unique to that service, and to match the IP address you specified in your docker-compose file under <code>vpn-subnet: ipv4_address:</code> for that service.</p>
<h3 id="secure-your-files">Secure Your Files</h3>
<p>These files are a little sensitive, so let&rsquo;s lock them down to be root accessible only.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">sudo chown root:root ~/docker/wireguard 
</span></span><span class="line"><span class="cl">sudo chmod <span class="m">600</span> ~/docker/wireguard
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="testing-access">Testing Access</h3>
<p>Your services are now available only when you connect to your VPN. Go ahead and connect and try accessing one of your services by going to the domain name you configured (ie pga.EXAMPLE.COM).</p>
<p>We aren&rsquo;t actually going through a reverse proxy here, and there isn&rsquo;t a service like Caddy, Traefik, or NGINX which manages port mapping. Services accessible over port 80 will work as normal, but services which need to be accessed on a non-standard port will need to have that port specified. For example portainer which I have configured to listen on port 9000, will need to be accessed by typing <code>portainer.EXAMPLE.COM:9000</code> in your URL bar.</p>
<p>Now you should be able to access your services securely, while keeping your standard services accessible as normal.</p>
]]></description></item><item><title>Compiling Nextcloud for Apple Silicon</title><link>https://eric-pierce.com/compiling-nextcloud-for-apple-silicon/</link><pubDate>Sun, 31 Oct 2021 12:48:21 -0500</pubDate><guid>https://eric-pierce.com/compiling-nextcloud-for-apple-silicon/</guid><description><![CDATA[<p>My 2016 MacBook Pro has really been showing its age, and the butterfly keyboard has been increasingly tough to type on, so I&rsquo;ve been in the market for a replacement. While I don&rsquo;t love the closed source approach Apple is taking with their Apple Silicon ARM64 Chips, their recent MacBook Pro lineup sets a totally new standard for power in a notebook.</p>
<p>I got my order in for the M1 Max, which is my first ARM64 based notebook, and started migrating over to it. As the first M1 based notebooks were released over a year ago, virtually all of the programs I want available have already been compiled to use the native M1 architecture, with one notable exception.</p>
<p>Nextcloud, which I use as a partial G-Suite replacement, is still only compiled for Intel based macs which require Rosetta 2 in order to run. This wouldn&rsquo;t be that big of a deal as Rosetta 2 seems to be pretty seamless, but there are several reports of <a href="https://github.com/nextcloud/desktop/issues/2659#issuecomment-830787727" target="_blank" rel="noopener noreffer">huge amounts of CPU usage</a> by the Intel version of the app. Because Nextcloud is always running in the background, this isn&rsquo;t a &ldquo;once and awhile&rdquo; issue.</p>
<p>Several enterprising folks with a little help from the Nextcloud team have successfully compiled a version of the client side Nextcloud app for Apple Silicon. Building on the work they put together in Github thread I was able to get a working installation, but it took some finesse. For anyone who wants to get a version compiled themselves, here are the specific steps I followed:</p>
<h3 id="1-install-homebrew">1. Install Homebrew</h3>
<p>If you don&rsquo;t have it installed, open up a terminal and get the excellent package manager homebrew up and running. More information on Homebrew can be found <a href="https://docs.brew.sh/Installation" target="_blank" rel="noopener noreffer">here</a>. You&rsquo;ll be prompted to download XCode command line tools, and will have to enter your login password to install:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-set-up-the-working-directory">2. Set up the working directory</h3>
<p>Create a folder in your home directory to build the related packages:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">mkdir ~/ncsilicon
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-install-dependencies-from-homebrew">3. Install Dependencies from Homebrew</h3>
<p>Homebrew will save us from having to compile many the dependencies manually. It looks like some people were running a version of Inkscape through Rosetta for icon generation. Inkscape is actually syntax compatible with librsvg, which has Apple Silicon support out of the box:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">brew install pcre2 harfbuzz freetype cmake librsvg
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-build-qt5-for-apple-silicon">4. Build Qt5 for Apple Silicon</h3>
<p>Even though Qt6.2 was just released with native Apple Silicon support, the Nextcloud application isn&rsquo;t compatible with it yet. Nextcloud still uses Qt5, and version 5.15 is the latest freely and publically available version. There are newer versions than 5.15 of Qt5 available behind a paywall, but 5.15 works really well for our needs. As there is no Apple Silicon binary available, we have to build it ourselves.</p>
<p>Clone the Qt5 repo and check out version 5.15:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">cd</span> ~/ncsilicon
</span></span><span class="line"><span class="cl">git clone git://code.qt.io/qt/qt5.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> qt5
</span></span><span class="line"><span class="cl">git checkout 5.15
</span></span></code></pre></td></tr></table>
</div>
</div><p>Next we need to pull down all the related modules for the build. This will take a while, and is probably the longest step of this whole process:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">./init-repository
</span></span></code></pre></td></tr></table>
</div>
</div><p>Qt5 actually has a missing header we need to add in order for it to compile correctly. This appears to be ignored by Big Sur&rsquo;s version of the clang compiler (clang 12), but Monterey (clang 13) complains and fails if you try to compile without it. Add this header with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">sed -i -e <span class="s1">&#39;s/#include &lt;qpa\/qplatformgraphicsbuffer.h&gt;/#include &lt;CoreGraphics\/CGColorSpace.h&gt; \n#include &lt;qpa\/qplatformgraphicsbuffer.h&gt;/g&#39;</span> ~/ncsilicon/qt5/qtbase/src/plugins/platforms/cocoa/qiosurfacegraphicsbuffer.h 
</span></span></code></pre></td></tr></table>
</div>
</div><p>Best practice is to build in a different folder than your source code, so the commands below create a new folder and get the stage set for the build:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">cd</span> ~/ncsilicon
</span></span><span class="line"><span class="cl">mkdir qt5-5.15-macOS-release
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> qt5-5.15-macOS-release
</span></span><span class="line"><span class="cl">../qt5/configure -release -prefix ./qtbase -nomake examples -nomake tests <span class="nv">QMAKE_APPLE_DEVICE_ARCHS</span><span class="o">=</span>arm64 -opensource -confirm-license -skip qt3d -skip qtwebengine
</span></span></code></pre></td></tr></table>
</div>
</div><p>Assuming no errors are thrown, we&rsquo;re ready to build. This will take a bit, but not as long as initiating the repository did. We don&rsquo;t need to run make install here because we built the libraries in the same location we&rsquo;ll be using them.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">make -j10
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="5-build-qtkeychain-for-apple-silicon">5. Build qtkeychain for Apple Silicon</h3>
<p>Now that Qt5 is done, we need to build qtkeychain. Same deal as above, we need to clone the repo and set up a build folder:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">cd</span> ~/ncsilicon
</span></span><span class="line"><span class="cl">git clone git@github.com:frankosterfeld/qtkeychain.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> qtkeychain
</span></span><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then build the binary. We do need to run make install here in order for the libraries to be included in the Qt5 folder.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">cmake .. -DCMAKE_INSTALL_PREFIX<span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase -DCMAKE_BUILD_TYPE<span class="o">=</span>Release -DBUILD_TRANSLATIONS<span class="o">=</span>OFF
</span></span><span class="line"><span class="cl">make install
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="6-build-openssl-for-apple-silicon">6. Build OpenSSL for Apple Silicon</h3>
<p>Now that qtkeychain is done, we need to build OpenSSL. We need to clone the repo and switch to the version used by Nextcloud (1.1.1):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">cd</span> ~/ncsilicon
</span></span><span class="line"><span class="cl">git clone git@github.com:openssl/openssl.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> openssl
</span></span><span class="line"><span class="cl">git checkout OpenSSL_1_1_1-stable
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then build the binary. OpenSSL uses caffinate to build:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MACOSX_DEPLOYMENT_TARGET</span><span class="o">=</span>10.13
</span></span><span class="line"><span class="cl">./Configure shared enable-rc5 zlib darwin64-arm64-cc no-asm
</span></span><span class="line"><span class="cl">caffeinate make
</span></span></code></pre></td></tr></table>
</div>
</div><p>Copy the libraries you want to /usr/local/lib. Alternatively you can run make install, but that&rsquo;ll install far more files including documentation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">sudo cp libssl.1.1.dylib libcrypto.1.1.dylib libcrypto.a libssl.a /usr/local/lib
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /usr/local/lib
</span></span><span class="line"><span class="cl">sudo ln -s libssl.1.1.dylib libssl.dylib
</span></span><span class="line"><span class="cl">sudo ln -s libcrypto.1.1.dylib libcrypto.dylib
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="7-build-nextcloud-apple-silicon">7. Build Nextcloud Apple Silicon</h3>
<p>Now that we have installed the dependencies from Homebrew, and compiled Apple Silicon versions of Qt5, Qtkeychain, and OpenSSL, we&rsquo;re ready to build the Nextcloud desktop app.</p>
<p>First clone the repo and set up a build folder:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">cd</span> ~/ncsilicon
</span></span><span class="line"><span class="cl">git clone git@github.com:nextcloud/desktop.git
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> desktop
</span></span><span class="line"><span class="cl">mkdir build
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> build
</span></span></code></pre></td></tr></table>
</div>
</div><p>We need to set up environment variables for the build, these tell the compiler where to find all of the libraries we just compiled such as Qt5 and qtkeychain.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">OPENSSL_ROOT_DIR</span><span class="o">=</span>~/ncsilicon/openssl
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">Qt5LinguistTools_DIR</span><span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">Qt5_DIR</span><span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">Qt5Keychain_DIR</span><span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase/lib/cmake/Qt5Keychain
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now its build time. This will take a little time but nothing too long. We&rsquo;ll use make install here which will package the application up in the Applications directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">cmake .. -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/Applications -DCMAKE_BUILD_TYPE<span class="o">=</span>Release
</span></span><span class="line"><span class="cl">make -j10
</span></span><span class="line"><span class="cl">make install
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="8-start-using-the-native-nextcloud-binary">8. Start using the native Nextcloud binary!</h3>
<p>Go ahead and launch the app and you should be set! If MacOS complains about the app not being from a known developer, hold down the Control button and right click on it, and select &ldquo;Open&rdquo;. It will prompt you with a few &ldquo;are you sure&rdquo; messages but then you&rsquo;re set.</p>
<h3 id="9-optional---sign-the-application-yourself">9. Optional - Sign the application yourself</h3>
<p>If you&rsquo;re signed up for the developer program and have a certificate, you can sign the app yourself by replacing &ldquo;YOUR NAME AND DEVELOPER ID&rdquo; with your organization name and ID, assuming your certificate is installed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="line"><span class="cl">codesign --force --sign <span class="s2">&#34;Developer ID Application: YOUR NAME AND DEVELOPER ID&#34;</span> --deep --verbose /Applications/Nextcloud.app
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Mask Detection With Computer Vision</title><link>https://eric-pierce.com/mask-detection-with-computer-vision/</link><pubDate>Wed, 02 Dec 2020 18:59:50 -0600</pubDate><guid>https://eric-pierce.com/mask-detection-with-computer-vision/</guid><description><![CDATA[<h3 id="overview">Overview</h3>
<p>Mask wearing is a simple and powerful way to combat COVID, but it is most effective when practiced at scale within populations. Unfortunately mask wearing has become politicized in the United States, and businesses are often in the position of policing and enforcing mask wearing themselves.</p>
<p>Enter the <a href="https://github.com/eric-pierce/COVID-Bouncer" target="_blank" rel="noopener noreffer">COVID Bouncer</a> - an application which can be used to detect mask wearing without needing to put a real person at risk of exposure. When paired with a door lock, the COVID Bouncer can detect the presence of face masks before allowing entry into a business.</p>
<p>The Bouncer is able to identify people not wearing masks as well as those wearing masks:</p>
<p> </p>
<p>It also functions with images that include multiple subjects as can be seen in the examples below:</p>
<p> </p>
<h3 id="tools-used">Tools Used</h3>
<p>This project was built using Apple&rsquo;s development stack, including their <a href="https://developer.apple.com/machine-learning/create-ml/" target="_blank" rel="noopener noreffer">CreateML</a> framework.</p>
<ul>
<li>The only tools required to use this repository is ther XCode suite, which includes CreateML.</li>
<li><a href="https://roboflow.com/" target="_blank" rel="noopener noreffer">Roboflow</a> was used during the data preparation phase.</li>
</ul>
<h3 id="data-acquisition">Data Acquisition</h3>
<p>The data for this project came from two sources - one dataset compiled on <a href="https://www.kaggle.com/" target="_blank" rel="noopener noreffer">kaggle</a> and one compiled by the <a href="https://www.roboflow.com/" target="_blank" rel="noopener noreffer">Roboflow</a>. Both of these datasets consist of images of people wearing masks and people not wearing masks. Some images include a mix of mask wearing and non-wearing individuals. The Kaggle dataset also included incorrectly worn masks, but those were removed due to low data availability.</p>
<ul>
<li><a href="https://www.kaggle.com/andrewmvd/face-mask-detection" target="_blank" rel="noopener noreffer">Kaggle Mask Detection Dataset</a></li>
<li><a href="https://public.roboflow.com/object-detection/mask-wearing" target="_blank" rel="noopener noreffer">Roboflow Mask Wearing Dataset</a>.</li>
</ul>
<h3 id="data-preparation">Data Preparation</h3>
<p>These datasets required some modification to align labels, and to convert from their respective formats to one which Apple&rsquo;s CreateML expects.</p>
<ul>
<li>Modify the annotations to use &ldquo;with_mask&rdquo; and &ldquo;without_mask&rdquo; as labels</li>
<li>Remove the &ldquo;mask_weared_incorrect&rdquo; label from the kaggle dataset</li>
<li>Convert annotation component of both datasets from Pascal VOC XML to Apple&rsquo;s CreateML JSON</li>
</ul>
<p>I used a 70/20/10 split for train/test/validation for this dataset. The final dataset consisted of:</p>
<ul>
<li>698 training images</li>
<li>199 testing images</li>
<li>100 validation images</li>
</ul>
<h3 id="model-architecture">Model Architecture</h3>
<p>I evaluated two training methods as part of this model development. Both models were trained for 18,000 iterations, which took ~14 hours per model. I used <a href="https://developers.google.com/machine-learning/crash-course/descending-into-ml/training-and-loss" target="_blank" rel="noopener noreffer">loss as an evaluation measure</a> for both models, which is an indicator of how far off from correct prediction a model is for a single example.</p>
<p>First I trained a Full Network (non-Transfer Learning) with an architecture based on YOLOv2:</p>

<p>The Full Network training results are below, and resulted in a loss of 1.355</p>

<p>Second I trained a Transfer Network based on Apple&rsquo;s &ldquo;Object Vision Feature Print&rdquo;:</p>

<p>The Transfer Network training results are below, and resulted in a loss of 0.31</p>

<h3 id="deployment">Deployment</h3>
<p>I used my personal iPhone as my Edge Device. Modern iPhones include a specialized chip for Neural Network processing. I built my iPhone app using a framework available on <a href="https://github.com/tombaranowicz/ObjectDetectionWithCreateML" target="_blank" rel="noopener noreffer">GitHub here</a>. This framework was an excellent starting point, but I modified the application code to:</p>
<ul>
<li>Use the custom model I trained instead of the roadsign detector</li>
<li>Only highlight objects detected when there is a &gt; 90% accuracy</li>
<li>Not allow for objects to overlap with each other (ie no detection of both mask wearing and non-mask-wearing)</li>
<li>Highlight masks in Green, and non-masks in Red</li>
</ul>
<h3 id="roadblocks">Roadblocks</h3>
<p>I ran into some issues with my personal phone not functioning correctly. The app I built functioned as expected in the iOS simulator, as well on older iPhones such as the iPhone X. I expect that this has to do with the camera on the new phones capturing images in a different format.</p>
<h3 id="next-steps">Next Steps</h3>
<p>Next steps for this project are to apply it to live video as opposed to still images. I&rsquo;ve already developed an application which does this using the <a href="https://developer.apple.com/documentation/vision/recognizing_objects_in_live_capture" target="_blank" rel="noopener noreffer">Breakfast Detector</a> example written by Apple. I&rsquo;m not satisfied with the results of this yet.</p>
<p>From a modeling architecture standpoint there is absolutely opportunity to increase accuracy. The simplest way to do this is to procure and train using more data. The dataset I have doesn’t have balanced examples of masks vs no-masks. Fortunately the gap is primarily on the non-mask class, and there are several datasets available which can be merged with my current dataset for a more balanced input.</p>
]]></description></item><item><title>Building a Personal Cloud</title><link>https://eric-pierce.com/building-a-personal-cloud/</link><pubDate>Sat, 28 Nov 2020 17:16:19 -0600</pubDate><guid>https://eric-pierce.com/building-a-personal-cloud/</guid><description><![CDATA[<p>Like many others, I have numerous services which I use frequently for work, fun, productivity, and more. While using third party services is the easiest and fastest way to fulfill a need, it is far from the most privacy friendly, or depending on your view the most secure. I decided that I wanted to change that, and in 2019 I began to replace third party hosted services with services I can host on a personal Virtual Private Server, and have complete control of the data. Below is a summary of the replacements I made:</p>
<h3 id="hosting-locations">Hosting Locations</h3>
<p><strong>Self-Hosted - Cloud</strong></p>
<ul>
<li>Google Contacts | Nextcloud Contacts</li>
<li>Google Calendar | Nextcloud Calendar</li>
<li>Dropbox | Nextcloud / Cryptomator</li>
<li>iCloud Notes | Standardnotes</li>
<li>Text File | Nextcloud Tasks / 2do</li>
<li>Lastpass | Vaultwarden</li>
<li>Pocket | Wallabag</li>
<li>Feedly | TT-RSS</li>
<li>TeamViewer | MeshCentral</li>
<li>Nothing | Firefox Sync Server</li>
<li>Nothing | Restic Backup to Backblaze</li>
<li>Nothing | Tandoor Recipes</li>
</ul>
<p><strong>Self-Hosted - Local</strong></p>
<ul>
<li>Nothing | PiHole + Unbound + DoH</li>
<li>Nothing | PiVPN - Wireguard</li>
<li>iCloud Computer Backup | NAS Time Machine</li>
<li>Amazon Cloudcam | DaFang Hacks / VLC / Telegram</li>
</ul>
<p>I also took this opportunity to move from Gmail to ProtonMail for email. While email can be self-hosted as well, I felt that swapping the very privacy-unfriendly Google service for a trusted encrypted solutions provider (ProtonMail) met my goal.</p>
<p>In 2020 I went through a migration from Traefik 1.7 to 2.4, and took the opportunity to completely revamp my self hosting approach, applications, best practices, security, and more. I&rsquo;m hosting everything on a Contabo VPS and on a local Raspberry Pi.</p>
<p><strong>Local Raspberry Pi</strong></p>
<ul>
<li><a href="https://nlnetlabs.nl/projects/unbound/about/" target="_blank" rel="noopener noreffer">Unbound</a> - Local recursive DNS resolver</li>
<li><a href="https://pi-hole.net/" target="_blank" rel="noopener noreffer">PiHole</a> - DNS black hole</li>
<li><a href="https://www.pivpn.io/" target="_blank" rel="noopener noreffer">Wireguard (PiVPN)</a> - VPN Access through PiVPN</li>
</ul>
<p>I bought several cheap Wyze 2.0 Cameras and put the <a href="https://github.com/EliasKotlyar/Xiaomi-Dafang-Hacks" target="_blank" rel="noopener noreffer">DaFang custom firmware</a> on them this lets me VPN into my home network and connect to network streams from the cameras using VLC on my phone. I have motion detection notifications running through Telegram with stills taken when motion is detected</p>
<p><strong>Contabo VPS - 9 Euro per month, 6 Cores, 16GB Ram, 400GB Storage (SSD)</strong></p>
<p>As part of my security updates, I decided that some services I host had no business being externally accessible, even when they&rsquo;re behind HTTP authentication. I set up wireguard docker image to allow me to access my VPS over VPN, and then modified wireguard&rsquo;s Coredns to allow me to access the services I want on the domains I would have previously accessed externally. I followed <a href="https://noobgasm.com/tutorial-additional-protection-with-wireguard/" target="_blank" rel="noopener noreffer">this guide</a> for that.</p>
<p>Other security updates include moving to official images for everything, leveraging Cloudflare&rsquo;s proxy service for any web based applications (though some may argue this isn&rsquo;t as good for privacy), and moving to docker secrets where possible</p>
<p>I also moved to a socket proxy for the docker socket rather than allowing any images (except for the socket proxy itself) direct access to the docker socket.</p>
<p>Everything except fail2ban on my Contabo VPS are sourced from docker images.</p>
<h3 id="web-applications-hosted-behind-wireguard-vpn">Web Applications hosted behind Wireguard VPN</h3>
<ul>
<li><a href="https://www.portainer.io/" target="_blank" rel="noopener noreffer">Portainer</a> - Docker Management</li>
<li><a href="https://www.phpmyadmin.net/" target="_blank" rel="noopener noreffer">PhpMyAdmin</a> - Management of a MariaDB database for applications which don&rsquo;t support Postgres</li>
<li><a href="https://www.pgadmin.org/" target="_blank" rel="noopener noreffer">PgAdmin</a> - Management of a Postgres database for any applications which do support Postgres</li>
<li><a href="https://github.com/joeferner/redis-commander" target="_blank" rel="noopener noreffer">Redis Commander</a> (Currently Disabled) - for managing my Redis Memcache installation to speed up Nextcloud</li>
</ul>
<h3 id="non-open-web-accessible-applications">Non-Open-web accessible applications</h3>
<ul>
<li><a href="https://github.com/fluencelabs/docker-socket-proxy" target="_blank" rel="noopener noreffer">Docker Socket Proxy</a> - This allows applications to access only the services they need from the socket proxy and nothing else</li>
<li><a href="https://github.com/containrrr/watchtower" target="_blank" rel="noopener noreffer">Watchtower</a> - Docker image updates, used as Ouroborus is no longer actively updated</li>
<li><a href="https://mariadb.org/" target="_blank" rel="noopener noreffer">MariaDB</a> - Open source MySQL server for applications which don&rsquo;t support my preferred SQL server, Postgres</li>
<li><a href="https://www.postgresql.org/" target="_blank" rel="noopener noreffer">Postgres</a> - Open source SQL server for applications which it</li>
<li><a href="https://redis.io/" target="_blank" rel="noopener noreffer">Redis</a> - Memcache to speed up Nextcloud</li>
<li><a href="https://github.com/djmaze/resticker" target="_blank" rel="noopener noreffer">Restic/Resticker</a> - This is a docker image which contains a parameterized version of Restic, for automated, encrypted, incremental backups. I&rsquo;m backing up to a Backblaze B2 bucket which is low cost and use based.</li>
</ul>
<h3 id="open-web-accessible-applications">Open-web accessible applications</h3>
<ul>
<li><a href="https://traefik.io/" target="_blank" rel="noopener noreffer">Traefik 2.4</a> - used for reverse proxying open-web applications</li>
<li><a href="https://github.com/mozilla-services/syncserver" target="_blank" rel="noopener noreffer">Firefox Syncserver</a> (MariaDB) - this is in the process of being moved to Rust, but that image isn&rsquo;t ready yet. Still using the old python 2.7 version to sync browser settings, extension lists, and bookmarks.</li>
<li><a href="https://www.wallabag.it/en" target="_blank" rel="noopener noreffer">Wallabag</a> (Postgres) - Pocket replacement, this integrates very well with iOS and allows me to &ldquo;stash&rdquo; anything I come across on twitter, reddit, browsing, and more. I also have Wallabag set up as an RSS feed so when I stash something it shows up in my RSS reader.</li>
<li><a href="https://nextcloud.com" target="_blank" rel="noopener noreffer">Nextcloud</a> (Postgres) - primarily used as Google replacement, and I use it for Contacts, Calendar, Drive, and Tasks/ToDo hosting</li>
<li><a href="https://github.com/linuxserver/docker-wireguard" target="_blank" rel="noopener noreffer">Wireguard</a> - allows me to access internal services via VPN. This is one of the few &ldquo;unofficial&rdquo; images I use from linuxserver.io as I don&rsquo;t think wireguard hosts an official one</li>
<li><a href="https://tt-rss.org/" target="_blank" rel="noopener noreffer">Tiny-Tiny-RSS</a> (Postgres) - Last year the developer created official docker images, so I moved from an unofficially maintained one to the official ones. This consists of a backend and frontend component, as well as an updater cron job. I much prefer this approach as the unofficial image wasn&rsquo;t static, and was just an older docker image that pulled the latest version of the app from Git.</li>
<li><a href="https://github.com/dani-garcia/vaultwarden" target="_blank" rel="noopener noreffer">Vaultwarden</a> (Postgres) - This is the unofficial bitwarden api/backend/frontend implementation in Rust. I moved from the default sqlite backend to a postgres backend and found that it is now much speedier when updating folders</li>
<li><a href="https://github.com/standardnotes/standalone" target="_blank" rel="noopener noreffer">Standardnotes Sync Server</a> (MariaDB) - This is the official backend implementation for standardnotes. I was using the Nextcloud Notes before, but wasn&rsquo;t happy with the mobile app experience (manual sync over webdav in the Notebooks app). The official iOS app is just as seamless as the native iPhone notes app. This backend server was recently re-written in JavaScript (previously Ruby on Rails). I am not using the recommended &ldquo;script&rdquo; based implementation here as I prefer more control over containers and architecture, so I&rsquo;ve implemented the standalone containers directly in my docker-compose file.</li>
<li><a href="https://github.com/standardnotes/web" target="_blank" rel="noopener noreffer">Standardnotes Web App</a> - the web frontend for standardnotes</li>
<li><a href="https://github.com/eric-pierce/standardnotes-extension-server" target="_blank" rel="noopener noreffer">Standardnotes Extensions</a> - This is a docker image which contains all the open source extensions for standardnotes. It&rsquo;s very simple to run, and lets you use several high powered extensions all self-hosted. I forked this and added additional themes and services.</li>
<li><a href="https://github.com/Ylianst/MeshCentral" target="_blank" rel="noopener noreffer">MeshCentral</a> - This is a complete replacement for TeamViewer, and enables remote access to my devices without needing to use a third party service. The only downside I&rsquo;ve found here is that there isn&rsquo;t a native mobile app.</li>
<li><a href="https://github.com/vabene1111/recipes" target="_blank" rel="noopener noreffer">Tandoor Recipes</a> - App for self-hosting and sharing recipes. With family members spread out this is a great way to connect around favorite recipes and meal planning.</li>
</ul>
<h3 id="possible-future-services">Possible Future Services</h3>
<ul>
<li>Bookstack</li>
<li>Papermerge</li>
<li>Monica CRM</li>
<li>fail2ban - may move it into a container</li>
</ul>
]]></description></item></channel></rss>