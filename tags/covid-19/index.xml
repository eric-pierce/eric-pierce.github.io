<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>COVID-19 - Tag - eric-pierce.com</title><link>https://eric-pierce.com/tags/covid-19/</link><description>COVID-19 - Tag - eric-pierce.com</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 02 Dec 2020 18:59:50 -0600</lastBuildDate><atom:link href="https://eric-pierce.com/tags/covid-19/" rel="self" type="application/rss+xml"/><item><title>Mask Detection</title><link>https://eric-pierce.com/mask-detection/</link><pubDate>Wed, 02 Dec 2020 18:59:50 -0600</pubDate><guid>https://eric-pierce.com/mask-detection/</guid><description><![CDATA[<h3 id="overview">Overview</h3>
<p>Mask wearing is a simple and powerful way to combat COVID, but it is most effective when practiced at scale within populations. Unfortunately mask wearing has become politicized in the United States, and businesses are often in the position of policing and enforcing mask wearing themselves.</p>
<p>Enter the <a href="https://github.com/eric-pierce/COVID-Bouncer" target="_blank" rel="noopener noreffer">COVID Bouncer</a> - an application which can be used to detect mask wearing without needing to put a real person at risk of exposure. When paired with a door lock, the COVID Bouncer can detect the presence of face masks before allowing entry into a business.</p>
<p>The Bouncer is able to identify people not wearing masks as well as those wearing masks:</p>
<p> </p>
<p>It also functions with images that include multiple subjects as can be seen in the examples below:</p>
<p> </p>
<h3 id="tools-used">Tools Used</h3>
<p>This project was built using Apple&rsquo;s development stack, including their <a href="https://developer.apple.com/machine-learning/create-ml/" target="_blank" rel="noopener noreffer">CreateML</a> framework.</p>
<ul>
<li>The only tools required to use this repository is ther XCode suite, which includes createML.</li>
<li><a href="https://roboflow.com/" target="_blank" rel="noopener noreffer">Roboflow</a> was used during the data preparation phase.</li>
</ul>
<h3 id="data-acquisition">Data Acquisition</h3>
<p>The data for this project came from two sources - one dataset compiled on <a href="https://www.kaggle.com/" target="_blank" rel="noopener noreffer">kaggle</a> and one compiled by the <a href="https://www.roboflow.com/" target="_blank" rel="noopener noreffer">Roboflow</a>. Both of these datasets consist of images of people wearing masks and people not wearing masks. Some images include a mix of mask wearing and non-wearing individuals. The Kaggle dataset also included incorrectly worn masks, but those were removed due to low data availability.</p>
<ul>
<li><a href="https://www.kaggle.com/andrewmvd/face-mask-detection" target="_blank" rel="noopener noreffer">Kaggle Mask Detection Dataset</a></li>
<li><a href="https://public.roboflow.com/object-detection/mask-wearing" target="_blank" rel="noopener noreffer">Roboflow Mask Wearing Dataset</a>.</li>
</ul>
<h3 id="data-preparation">Data Preparation</h3>
<p>These datasets required some modification to align labels, and to convert from their respective formats to one which Apple&rsquo;s CreateML expects.</p>
<ul>
<li>Modify the annotations to use &ldquo;with_mask&rdquo; and &ldquo;without_mask&rdquo; as labels</li>
<li>Remove the &ldquo;mask_weared_incorrect&rdquo; label from the kaggle dataset</li>
<li>Convert annotation component of both datasets from Pascal VOC XML to Apple&rsquo;s CreateML JSON</li>
</ul>
<p>I used a 70/20/10 split for train/test/validation for this dataset. The final dataset consisted of:</p>
<ul>
<li>698 training images</li>
<li>199 testing images</li>
<li>100 validation images</li>
</ul>
<h3 id="model-architecture">Model Architecture</h3>
<p>I evaluated two training methods as part of this model development. Both models were trained for 18,000 iterations, which took ~14 hours per model. I used <a href="https://developers.google.com/machine-learning/crash-course/descending-into-ml/training-and-loss" target="_blank" rel="noopener noreffer">loss as an evaluation measure</a> for both models, which is an indicator of how far off from correct prediction a model is for a single example.</p>
<p>First I trained a Full Network (non-Transfer Learning) with an architecture based on YOLOv2:</p>

<p>The Full Network training results are below, and resulted in a loss of 1.355</p>

<p>Second I trained a Transfer Network based on Apple&rsquo;s &ldquo;Object Vision Feature Print&rdquo;:</p>

<p>The Transfer Network training results are below, and resulted in a loss of 0.31</p>

<h3 id="deployment">Deployment</h3>
<p>I used my personal iPhone as my Edge Device. Modern iPhones include a specialized chip for Neural Network processing. I built my iPhone app using a framework available on <a href="https://github.com/tombaranowicz/ObjectDetectionWithCreateML" target="_blank" rel="noopener noreffer">GitHub here</a>. This framework was an excellent starting point, but I modified the application code to:</p>
<ul>
<li>Use the custom model I trained instead of the roadsign detector</li>
<li>Only highlight objects detected when there is a &gt; 90% accuracy</li>
<li>Not allow for objects to overlap with each other (ie no detection of both mask wearing and non-mask-wearing)</li>
<li>Highlight masks in Green, and non-masks in Red</li>
</ul>
<h3 id="roadblocks">Roadblocks</h3>
<p>I ran into some issues with my personal phone not functioning correctly. The app I built functioned as expected in the iOS simulator, as well on older iPhones such as the iPhone X. I expect that this has to do with the camera on the new phones capturing images in a different format.</p>
<h3 id="next-steps">Next Steps</h3>
<p>Next steps for this project are to apply it to live video as opposed to still images. I&rsquo;ve already developed an application which does this using the <a href="https://developer.apple.com/documentation/vision/recognizing_objects_in_live_capture" target="_blank" rel="noopener noreffer">Breakfast Detector</a> example written by Apple. I&rsquo;m not satisfied with the results of this yet.</p>
<p>From a modeling architecture standpoint there is absolutely opportunity to increase accuracy. The simplest way to do this is to procure and train using more data. The dataset I have doesnâ€™t have balanced examples of masks vs no-masks. Fortunately the gap is primarily on the non-mask class, and there are several datasets available which can be merged with my current dataset for a more balanced input.</p>
]]></description></item></channel></rss>