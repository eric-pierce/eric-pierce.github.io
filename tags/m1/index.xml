<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>M1 - Tag - eric-pierce.com</title><link>https://eric-pierce.com/tags/m1/</link><description>M1 - Tag - eric-pierce.com</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 31 Oct 2021 12:48:21 -0500</lastBuildDate><atom:link href="https://eric-pierce.com/tags/m1/" rel="self" type="application/rss+xml"/><item><title>Compiling Nextcloud for Apple Silicon</title><link>https://eric-pierce.com/compiling-nextcloud-for-apple-silicon/</link><pubDate>Sun, 31 Oct 2021 12:48:21 -0500</pubDate><guid>https://eric-pierce.com/compiling-nextcloud-for-apple-silicon/</guid><description><![CDATA[<p>My 2016 MacBook Pro has really been showing its age, and the butterfly keyboard has been increasingly tough to type on, so I&rsquo;ve been in the market for a replacement. While I don&rsquo;t love the closed source approach Apple is taking with their Apple Silicon ARM64 Chips, their recent MacBook Pro lineup sets a totally new standard for power in a notebook.</p>
<p>I got my order in for the M1 Max, which is my first ARM64 based notebook, and started migrating over to it. As the first M1 based notebooks were released over a year ago, virtually all of the programs I want available have already been compiled to use the native M1 architecture, with one notable exception.</p>
<p>Nextcloud, which I use as a partial G-Suite replacement, is still only compiled for Intel based macs which require Rosetta 2 in order to run. This wouldn&rsquo;t be that big of a deal as Rosetta 2 seems to be pretty seamless, but there are several reports of <a href="https://github.com/nextcloud/desktop/issues/2659#issuecomment-830787727" target="_blank" rel="noopener noreffer">huge amounts of CPU usage</a> by the Intel version of the app. Because Nextcloud is always running in the background, this isn&rsquo;t a &ldquo;once and awhile&rdquo; issue.</p>
<p>Several enterprising folks with a little help from the Nextcloud team have successfully compiled a version of the Nextcloud app for Apple Silicon. Building on the work they put together in Github thread I was able to get a working installation, but it took some finesse. For anyone who wants to get a version compiled themselves, here are the specific steps I followed:</p>
<h3 id="1-install-homebrew">1. Install Homebrew</h3>
<p>If you don&rsquo;t have it installed, open up a terminal and get the excellent package manager homebrew up and running. More information on Homebrew can be found <a href="https://docs.brew.sh/Installation" target="_blank" rel="noopener noreffer">here</a>. You&rsquo;ll be prompted to download XCode command line tools, and will have to enter your login password to install:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">/bin/bash -c <span class="s2">&#34;</span><span class="k">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="k">)</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="2-set-up-the-working-directory">2. Set up the working directory</h3>
<p>Create a folder in your home directory to build the related packages:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">mkdir ~/ncsilicon
</code></pre></td></tr></table>
</div>
</div><h3 id="3-install-dependencies-from-homebrew">3. Install Dependencies from Homebrew</h3>
<p>Homebrew will save us from having to compile many the dependencies manually. It looks like some people were running a version of Inkscape through Rosetta for icon generation. Inkscape is actually syntax compatible with librsvg, which has Apple Silicon support out of the box:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">brew install pcre2 harfbuzz freetype cmake librsvg
</code></pre></td></tr></table>
</div>
</div><h3 id="4-build-qt5-for-apple-silicon">4. Build Qt5 for Apple Silicon</h3>
<p>Even though Qt6.2 was just released with native Apple Silicon support, the Nextcloud application isn&rsquo;t compatible with it yet. Nextcloud still uses Qt5, and version 5.15 is the latest freely and publically available version. There are newer versions than 5.15 of Qt5 available behind a paywall, but 5.15 works really well for our needs. As there is no Apple Silicon binary available, we have to build it ourselves.</p>
<p>Clone the Qt5 repo and check out version 5.15:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="nb">cd</span> ~/ncsilicon
git clone git://code.qt.io/qt/qt5.git
<span class="nb">cd</span> qt5
git checkout 5.15
</code></pre></td></tr></table>
</div>
</div><p>Next we need to pull down all the related modules for the build. This will take a while, and is probably the longest step of this whole process:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">./init-repository
</code></pre></td></tr></table>
</div>
</div><p>Qt5 actually has a missing header we need to add in order for it to compile correctly. This appears to be ignored by Big Sur&rsquo;s version of the clang compiler (clang 12), but Monterey (clang 13) complains and fails if you try to compile without it. Add this header with:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">sed -i -e <span class="s1">&#39;s/#include &lt;qpa\/qplatformgraphicsbuffer.h&gt;/#include &lt;CoreGraphics\/CGColorSpace.h&gt; \n#include &lt;qpa\/qplatformgraphicsbuffer.h&gt;/g&#39;</span> ~/ncsilicon/qt5/qtbase/src/plugins/platforms/cocoa/qiosurfacegraphicsbuffer.h 
</code></pre></td></tr></table>
</div>
</div><p>Best practice is to build in a different folder than your source code, so the commands below create a new folder and get the stage set for the build:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="nb">cd</span> ~/ncsilicon
mkdir qt5-5.15-macOS-release
<span class="nb">cd</span> qt5-5.15-macOS-release
../qt5/configure -release -prefix ./qtbase -nomake examples -nomake tests <span class="nv">QMAKE_APPLE_DEVICE_ARCHS</span><span class="o">=</span>arm64 -opensource -confirm-license -skip qt3d -skip qtwebengine
</code></pre></td></tr></table>
</div>
</div><p>Assuming no errors are thrown, we&rsquo;re ready to build. This will take a bit, but not as long as initiating the repository did. We don&rsquo;t need to run make install here because we built the libraries in the same location we&rsquo;ll be using them.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">make -j10
</code></pre></td></tr></table>
</div>
</div><h3 id="5-build-qtkeychain-for-apple-silicon">5. Build qtkeychain for Apple Silicon</h3>
<p>Now that Qt5 is done, we need to build qtkeychain. Same deal as above, we need to clone the repo and set up a build folder:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="nb">cd</span> ~/ncsilicon
git clone git@github.com:frankosterfeld/qtkeychain.git
<span class="nb">cd</span> qtkeychain
mkdir build
<span class="nb">cd</span> build
</code></pre></td></tr></table>
</div>
</div><p>Then build the binary. We do need to run make install here in order for the libraries to be included in the Qt5 folder.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">cmake .. -DCMAKE_INSTALL_PREFIX<span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase -DCMAKE_BUILD_TYPE<span class="o">=</span>Release -DBUILD_TRANSLATIONS<span class="o">=</span>OFF
make install
</code></pre></td></tr></table>
</div>
</div><h3 id="6-build-openssl-for-apple-silicon">6. Build OpenSSL for Apple Silicon</h3>
<p>Now that qtkeychain is done, we need to build OpenSSL. We need to clone the repo and switch to the version used by Nextcloud (1.1.1):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="nb">cd</span> ~/ncsilicon
git clone git@github.com:openssl/openssl.git
<span class="nb">cd</span> openssl
git checkout OpenSSL_1_1_1-stable
</code></pre></td></tr></table>
</div>
</div><p>Then build the binary. OpenSSL uses caffinate to build:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="nb">export</span> <span class="nv">MACOSX_DEPLOYMENT_TARGET</span><span class="o">=</span>10.13
./Configure shared enable-rc5 zlib darwin64-arm64-cc no-asm
caffeinate make
</code></pre></td></tr></table>
</div>
</div><p>Copy the libraries you want to /usr/local/lib. Alternatively you can run make install, but that&rsquo;ll install far more files including documentation:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">sudo cp libssl.1.1.dylib libcrypto.1.1.dylib libcrypto.a libssl.a /usr/local/lib
<span class="nb">cd</span> /usr/local/lib
sudo ln -s libssl.1.1.dylib libssl.dylib
sudo ln -s libcrypto.1.1.dylib libcrypto.dylib
</code></pre></td></tr></table>
</div>
</div><h3 id="7-build-nextcloud-apple-silicon">7. Build Nextcloud Apple Silicon</h3>
<p>Now that we have installed the dependencies from Homebrew, and compiled Apple Silicon versions of Qt5, Qtkeychain, and OpenSSL, we&rsquo;re ready to build the Nextcloud desktop app.</p>
<p>First clone the repo and set up a build folder:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="nb">cd</span> ~/ncsilicon
git clone git@github.com:nextcloud/desktop.git
<span class="nb">cd</span> desktop
mkdir build
<span class="nb">cd</span> build
</code></pre></td></tr></table>
</div>
</div><p>We need to set up environment variables for the build, these tell the compiler where to find all of the libraries we just compiled such as Qt5 and qtkeychain.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh"><span class="nb">export</span> <span class="nv">OPENSSL_ROOT_DIR</span><span class="o">=</span>~/ncsilicon/openssl
<span class="nb">export</span> <span class="nv">Qt5LinguistTools_DIR</span><span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase
<span class="nb">export</span> <span class="nv">Qt5_DIR</span><span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase
<span class="nb">export</span> <span class="nv">Qt5Keychain_DIR</span><span class="o">=</span>~/ncsilicon/qt5-5.15-macOS-release/qtbase/lib/cmake/Qt5Keychain
</code></pre></td></tr></table>
</div>
</div><p>Now its build time. This will take a little time but nothing too long. We&rsquo;ll use make install here which will package the application up in the Applications directory.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">cmake .. -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/Applications -DCMAKE_BUILD_TYPE<span class="o">=</span>Release
make -j10
make install
</code></pre></td></tr></table>
</div>
</div><h3 id="8-start-using-the-native-nextcloud-binary">8. Start using the native Nextcloud binary!</h3>
<p>Go ahead and launch the app and you should be set! If MacOS complains about the app not being from a known developer, hold down the Control button and right click on it, and select &ldquo;Open&rdquo;. It will prompt you with a few &ldquo;are you sure&rdquo; messages but then you&rsquo;re set.</p>
<h3 id="9-optional---sign-the-application-yourself">9. Optional - Sign the application yourself</h3>
<p>If you&rsquo;re signed up for the developer program and have a certificate, you can sign the app yourself by replacing &ldquo;YOUR NAME AND DEVELOPER ID&rdquo; with your organization name and ID, assuming your certificate is installed:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-zsh" data-lang="zsh">codesign --force --sign <span class="s2">&#34;Developer ID Application: YOUR NAME AND DEVELOPER ID&#34;</span> --deep --verbose /Applications/Nextcloud.app
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>