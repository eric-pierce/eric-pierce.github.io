[{
    "title": "Compiling Nextcloud for Apple Silicon",
    "date": "",
    "description": "",
    "body": "My 2016 MacBook Pro has really been showing its age, and the butterfly keyboard has been increasingly tough to type on, so I\u0026rsquo;ve been in the market for a replacement. While I don\u0026rsquo;t love the closed source approach Apple is taking with their Apple Silicon ARM64 Chips, their recent MacBook Pro lineup sets a totally new standard for power in a notebook.\nI got my order in for the M1 Max, which is my first ARM64 based notebook, and started migrating over to it. As the first M1 based notebooks were released over a year ago, virtually all of the programs I want available have already been compiled to use the native M1 architecture, with one notable exception.\nNextcloud, which I use as a partial G-Suite replacement, is still only compiled for Intel based macs which require Rosetta 2 in order to run. This wouldn\u0026rsquo;t be that big of a deal as Rosetta 2 seems to be pretty seamless, but there are several reports of huge amounts of CPU usage by the Intel version of the app. Because Nextcloud is always running in the background, this isn\u0026rsquo;t a \u0026ldquo;once and awhile\u0026rdquo; issue.\nSeveral enterprising folks with a little help from the Nextcloud team have successfully compiled a version of the Nextcloud app for Apple Silicon. Building on the work they put together in Github thread I was able to get a working installation, but it took some finesse. For anyone who wants to get a version compiled themselves, here are the specific steps I followed:\n1. Install Homebrew If you don\u0026rsquo;t have it installed, open up a terminal and get homebrew, a package manager for MacOS and Linux up and running. More information on Homebrew can be found here\n1/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 2. Set up the working directory Create a folder called ncsilicon in your home directory to build the related packages.\n1mkdir ~/ncsilicon 3. Install Dependencies from Homebrew Homebrew will save us from having to compile many the dependencies manually. While a few folks on the Github issue thread discussing this took the extra step of compiling openssl from scratch, we can just use the 1.1 version available through Homebrew. Additionally, it looks like some people were running a version of Inkscape through Rosetta for icon generation. Inkscape is actually syntax compatible with librsvg, which has Apple Silicon out of the box:\n1brew install pcre2 harfbuzz freetype cmake librsvg openssl@1.1 4. Build Qt5 for Apple Silicon While qt6.2 was just released with native Apple Silicon support, the Nextcloud application isn\u0026rsquo;t yet updated to be compatible with it. Nextcloud still uses Qt5, of which version 5.15 is the latest freely available version before the repository was made private. As there is no apple silicon binary available, we have to build it ourselves.\nClone the Qt5 repo and check out version 5.15:\n1git clone git://code.qt.io/qt/qt5.git 2cd qt5 3git checkout 5.15 Next we need to pull down all the related modules for the build. This will take a while, and is probably the longest step of this whole process:\n1./init-repository The Qt5 actually has a missing header we need to add in order for it to compile correctly. This appeared to be ignored by Big Sur\u0026rsquo;s version of the clang compiler (12), but Monterey (clang 13) complains and fails if you try to compile without it. Add this header with:\n1sed -i -e \u0026#39;s/#include \u0026lt;qpa\\/qplatformgraphicsbuffer.h\u0026gt;/#include \u0026lt;CoreGraphics\\/CGColorSpace.h\u0026gt; \\n#include \u0026lt;qpa\\/qplatformgraphicsbuffer.h\u0026gt;/g\u0026#39; ~/ncsilicon/qt5/qtbase/src/plugins/platforms/cocoa/qiosurfacegraphicsbuffer.h Best practice is to build in a different folder than your source code, so the commands below create a new folder and get the stage set for the build:\n1cd .. 2mkdir qt5-5.15-macOS-release 3cd qt5-5.15-macOS-release 4../qt5/configure -release -prefix ./qtbase -nomake examples -nomake tests QMAKE_APPLE_DEVICE_ARCHS=arm64 -opensource -confirm-license -skip qt3d -skip qtwebengine Assuming no errors are thrown, we\u0026rsquo;re ready to build. This will take a bit, but not as long as initiating the repository did.\n1make -j10 5. Build qtkeychain for Apple Silicon Now that Qt5 is done, we need to build qtkeychain. Same deal as above, we need to clone the repo and set up a build folder:\n1cd ~/ncsilicon 2git clone git@github.com:frankosterfeld/qtkeychain.git 3cd qtkeychain 4mkdir build 5cd build Then build the binary:\n1cmake .. -DCMAKE_INSTALL_PREFIX=~/ncsilicon/qt5-5.15-macOS-release/qtbase -DCMAKE_BUILD_TYPE=Release -DBUILD_TRANSLATIONS=OFF 2make install 6. Build Nextcloud Apple Silicon Now that we have installed the dependencies from Homebrew, and compiled Apple Silicon versions of Qt5 and Qtkeychain, we\u0026rsquo;re ready to build the Nextcloud desktop app.\nFirst clone the repo:\n1cd ~/ncsilicon 2git clone git@github.com:nextcloud/desktop.git 3cd desktop 4mkdir build 5cd build We need to set up environment variables for the build. You should be able to just copy and paste the below into your terminal:\n1export OPENSSL_ROOT_DIR=$(brew --prefix openssl@1.1) 2export Qt5LinguistTools_DIR=~/ncsilicon/qt5-5.15-macOS-release/qtbase 3export Qt5_DIR=~/ncsilicon/qt5-5.15-macOS-release/qtbase 4export Qt5Keychain_DIR=~/ncsilicon/qt5-5.15-macOS-release/qtbase/lib/cmake/Qt5Keychain Now its build time. This will take a little time but nothing too long:\n1cmake .. -DCMAKE_INSTALL_PREFIX=/Applications -DCMAKE_BUILD_TYPE=Release 2make -j10 You should now have a Nextcloud app in ~/ncsilicon/desktop/build/bin/, which you can copy right into your Applications directory. If you want you can also remove the signature from the app:\n1cd ~/ncsilicon/desktop/build/bin/ 2codesign --remove-signature --deep --verbose Nextcloud.app 7. Move your freshly built app to the Applications folder Finally copy the application out to /Applications - you\u0026rsquo;re done!\n1cp ~/ncsilicon/desktop/build/bin/Nextcloud.app /Applications/ Go ahead and launch the app and you should be set! If MacOS complains about the app not being from a known developer, hold down the Control button and right click on it, and select \u0026ldquo;Open\u0026rdquo;. It will prompt you with a few \u0026ldquo;are you sure\u0026rdquo; messages but then you\u0026rsquo;re set.\n8. Optional - Sign the application yourself If you\u0026rsquo;re signed up for the developer program and have a certificate, you can sign the app yourself by replacing \u0026ldquo;YOUR NAME\u0026rdquo; with your organization name\n1codesign --force --sign \u0026#34;Developer ID Application: YOUR NAME\u0026#34; --deep --verbose /Applications/Nextcloud.app ",
    "ref": "/posts/compiling-nextcloud-for-apple-silicon/"
  },{
    "title": "Mask Detection with CreateML",
    "date": "",
    "description": "",
    "body": "Overview Mask wearing is a simple and powerful way to combat COVID, but it is most effective when practiced at scale within populations. Unfortunately mask wearing has become politicized in the United States, and businesses are often in the position of policing and enforcing mask wearing themselves.\nEnter the COVID Bouncer - an application which can be used to detect mask wearing without needing to put a real person at risk of exposure. When paired with a door lock, the COVID Bouncer can detect the presence of face masks before allowing entry into a business.\nThe Bouncer is able to identify people not wearing masks as well as those wearing masks:\nIt also functions with images that include multiple subjects as can be seen in the examples below:\nTools Used This project was built using Apple\u0026rsquo;s development stack, including their CreateML framework.\n The only tools required to use this repository is ther XCode suite, which includes createML. Roboflow was used during the data preparation phase.  Data Acquisition The data for this project came from two sources - one dataset compiled on kaggle and one compiled by the Roboflow. Both of these datasets consist of images of people wearing masks and people not wearing masks. Some images include a mix of mask wearing and non-wearing individuals. The Kaggle dataset also included incorrectly worn masks, but those were removed due to low data availability.\n Kaggle Mask Detection Dataset Roboflow Mask Wearing Dataset.  Data Preparation These datasets required some modification to align labels, and to convert from their respective formats to one which Apple\u0026rsquo;s CreateML expects.\n Modify the annotations to use \u0026ldquo;with_mask\u0026rdquo; and \u0026ldquo;without_mask\u0026rdquo; as labels Remove the \u0026ldquo;mask_weared_incorrect\u0026rdquo; label from the kaggle dataset Convert annotation component of both datasets from Pascal VOC XML to Apple\u0026rsquo;s CreateML JSON  I used a 70/20/10 split for train/test/validation for this dataset. The final dataset consisted of:\n 698 training images 199 testing images 100 validation images  Model Architecture I evaluated two training methods as part of this model development. Both models were trained for 18,000 iterations, which took ~14 hours per model. I used loss as an evaluation measure for both models, which is an indicator of how far off from correct prediction a model is for a single example.\nFirst I trained a Full Network (non-Transfer Learning) with an architecture based on YOLOv2:\nThe Full Network training results are below, and resulted in a loss of 1.355\nSecond I trained a Transfer Network based on Apple\u0026rsquo;s \u0026ldquo;Object Vision Feature Print\u0026rdquo;:\nThe Transfer Network training results are below, and resulted in a loss of 0.31\nDeployment I used my personal iPhone as my Edge Device. Modern iPhones include a specialized chip for Neural Network processing. I built my iPhone app using a framework available on GitHub here. This framework was an excellent starting point, but I modified the application code to:\n Use the custom model I trained instead of the roadsign detector Only highlight objects detected when there is a \u0026gt; 90% accuracy Not allow for objects to overlap with each other (ie no detection of both mask wearing and non-mask-wearing) Highlight masks in Green, and non-masks in Red  Roadblocks I ran into some issues with my personal phone not functioning correctly. The app I built functioned as expected in the iOS simulator, as well on older iPhones such as the iPhone X. I expect that this has to do with the camera on the new phones capturing images in a different format.\nNext Steps Next steps for this project are to apply it to live video as opposed to still images. I\u0026rsquo;ve already developed an application which does this using the Breakfast Detector example written by Apple. I\u0026rsquo;m not satisfied with the results of this yet.\nFrom a modeling architecture standpoint there is absolutely opportunity to increase accuracy. The simplest way to do this is to procure and train using more data. The dataset I have doesn’t have balanced examples of masks vs no-masks. Fortunately the gap is primarily on the non-mask class, and there are several datasets available which can be merged with my current dataset for a more balanced input.\n",
    "ref": "/posts/mask-detection/"
  },{
    "title": "Building A Personal Cloud",
    "date": "",
    "description": "",
    "body": "Like many others, I have numerous services which I use frequently for work, fun, productivity, and more. While using third party services is the easiest and fastest way to fulfill a need, it is far from the most privacy friendly, or depending on your view the most secure. I decided that I wanted to change that, and in 2019 I began to replace third party hosted services with services I can host on a personal Virtual Private Server, and have complete control of the data. Below is a summary of the replacements I made:\nSelf-Hosted - Cloud\n Google Contacts | Nextcloud Contacts Google Calendar | Nextcloud Calendar Dropbox | Nextcloud / Cryptomator iCloud Notes | Standardnotes Text File | Nextcloud Tasks / 2do Lastpass | Bitwarden_rs Pocket | Wallabag Feedly | TT-RSS TeamViewer | MeshCentral Nothing | Firefox Sync Server Nothing | Restic Backup to Backblaze Nothing | Tandoor Recipes  Self-Hosted - Local\n Nothing | PiHole + Unbound + DoH Nothing | PiVPN - Wireguard iCloud Computer Backup | NAS Time Machine Amazon Cloudcam | DaFang Hacks / VLC / Telegram  I also took this opportunity to move from Gmail to ProtonMail for email. While email can be self-hosted as well, I felt that swapping the very privacy-unfriendly Google service for a trusted encrypted solutions provider (ProtonMail) met my goal.\nIn 2020 I went through a migration from Traefik 1.7 to 2.4, and took the opportunity to completely revamp my self hosting approach, applications, best practices, security, and more. I\u0026rsquo;m hosting everything on a Contabo VPS and on a local Raspberry Pi.\nLocal Raspberry Pi\n Unbound - Local recursive DNS resolver PiHole - DNS black hole Wireguard (PiVPN) - VPN Access through PiVPN  I bought several cheap Wyze 2.0 Cameras and put the DaFang custom firmware on them this lets me VPN into my home network and connect to network streams from the cameras using VLC on my phone. I have motion detection notifications running through Telegram with stills taken when motion is detected\nContabo VPS - 9 Euro per month, 6 Cores, 16GB Ram, 400GB Storage (SSD)\nAs part of my security updates, I decided that some services I host had no business being externally accessible, even when they\u0026rsquo;re behind HTTP authentication. I set up wireguard docker image to allow me to access my VPS over VPN, and then modified wireguard\u0026rsquo;s Coredns to allow me to access the services I want on the domains I would have previously accessed externally. I followed this guide for that.\nOther security updates include moving to official images for everything, leveraging Cloudflare\u0026rsquo;s proxy service for any web based applications (though some may argue this isn\u0026rsquo;t as good for privacy), and moving to docker secrets where possible\nI also moved to a socket proxy for the docker socket rather than allowing any images (except for the socket proxy itself) direct access to the docker socket.\nEverything except fail2ban on my Contabo VPS are sourced from docker images.\nWeb Applications hosted behind Wireguard VPN\n Portainer - Docker Management PhpMyAdmin - Management of a MariaDB database for applications which don\u0026rsquo;t support Postgres PgAdmin - Management of a Postgres database for any applications which do support Postgres Redis Commander (Currently Disabled) - for managing my Redis Memcache installation to speed up Nextcloud  Non-Open-web accessible applications\n Docker Socket Proxy - This allows applications to access only the services they need from the socket proxy and nothing else Watchtower - Docker image updates, used as Ouroborus is no longer actively updated MariaDB - Open source MySQL server for applications which don\u0026rsquo;t support my preferred SQL server, Postgres Postgres - Open source SQL server for applications which it Redis - Memcache to speed up Nextcloud Restic/Resticker - This is a docker image which contains a parameterized version of Restic, for automated, encrypted, incremental backups. I\u0026rsquo;m backing up to a Backblaze B2 bucket which is low cost and use based.  Open-web accessible applications\n Traefik 2.4 - used for reverse proxying open-web applications Firefox Syncserver (MariaDB) - this is in the process of being moved to Rust, but that image isn\u0026rsquo;t ready yet. Still using the old python 2.7 version to sync browser settings, extension lists, and bookmarks. Wallabag (Postgres) - Pocket replacement, this integrates very well with iOS and allows me to \u0026ldquo;stash\u0026rdquo; anything I come across on twitter, reddit, browsing, and more. I also have Wallabag set up as an RSS feed so when I stash something it shows up in my RSS reader. Nextcloud (Postgres) - primarily used as Google replacement, and I use it for Contacts, Calendar, Google Drive, and Tasks/ToDo hosting Wireguard - allows me to access internal services via VPN. This is one of the few \u0026ldquo;unofficial\u0026rdquo; images as I don\u0026rsquo;t think wireguard hosts an official one Tiny-Tiny-RSS (Postgres) - Last year the developer created official docker images, so I moved from an unofficially maintained one to the official ones. This consists of a backend and frontend component, as well as an updater cron job. I much prefer this approach as the unofficial image wasn\u0026rsquo;t static, and was just an older docker image that pulled the latest version of the app from Git. Vaultwarden (Postgres) - This is the unofficial bitwarden api/backend/frontend implementation in Rust. I moved from the default sqlite backend to a postgres backend and found that it is now much speedier when updating folders Standardnotes Sync Server (MariaDB) - This is the official backend implementation for standardnotes. I was using the Nextcloud Notes before, but wasn\u0026rsquo;t happy with the mobile app experience (manual sync over webdav in the Notebooks app). The official iOS app is just as seamless as the native iPhone notes app. This backend server was recently re-written in JavaScript (previously Ruby on Rails). I am not using the recommended \u0026ldquo;script\u0026rdquo; based implementation here as I prefer more control over containers and architecture, so I\u0026rsquo;ve implemented the standalone containers directly in my docker-compose file. Standardnotes Web App - the web frontend for standardnotes Standardnotes Extensions - This is a docker image which contains all the open source extensions for standardnotes. It\u0026rsquo;s very simple to run, and lets you use several high powered extensions all self-hosted. I forked this and added additional themes and services. MeshCentral - This is a complete replacement for TeamViewer, and enables remote access to my devices without needing to use a third party service. The only downside I\u0026rsquo;ve found here is that there isn\u0026rsquo;t a native mobile app. Tandoor Recipes - App for self-hosting and sharing recipes. With family members spread out this is a great way to connect around favorite recipes and meal planning.  Services I\u0026rsquo;m considering adding in the future:\n Bookstack Papermerge Monica CRM fail2ban - may move it into a container  ",
    "ref": "/posts/building-a-personal-cloud/"
  },{
    "title": "About",
    "date": "",
    "description": "A place to Share Projects",
    "body": "I\u0026rsquo;ve always had a project or two in progress, many of which I work through by following guides and walkthroughs posted by others.\nI created this site with the intention of documenting what I work on, and to provide additional guidance for others which may be interested in building on it.\n",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
